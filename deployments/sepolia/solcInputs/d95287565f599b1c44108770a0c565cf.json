{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorV2V3Interface} from \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\n// solhint-disable\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// 1. 创建一个收款函数\r\n// 2. 记录投资人并且查看\r\n// 3. 在锁定期内，达到目标值，生产商可以提款 (目标值通过美元标定，需要通过预言机进行转换，如果是本地测试，则使用模拟预言机)\r\n// 4. 在锁定期内，没有达到目标值，投资人在锁定期以后退款  \r\n\r\ncontract FundMe {\r\n    mapping(address => uint256) public fundersToAmount;\r\n\r\n    uint256 immutable MINIMUM_VALUE;\r\n\r\n    uint256 immutable TARGET;\r\n    \r\n    uint256 immutable LOCK_TIME;\r\n\r\n    uint256 immutable DEPLOYMENTTIMESTAMP;\r\n\r\n    AggregatorV3Interface public dataFeed;\r\n\r\n    address public owner;\r\n\r\n    event FundWithdrawByOwner(uint256);\r\n\r\n    event RefundByFunder(address, uint256);\r\n\r\n    constructor(uint256 minimumValue, uint256 target, uint256 lockTime, address dataFeedAddr) {\r\n        MINIMUM_VALUE = minimumValue;\r\n        TARGET = target;\r\n        LOCK_TIME = lockTime;\r\n        DEPLOYMENTTIMESTAMP = block.timestamp;\r\n        dataFeed = AggregatorV3Interface(dataFeedAddr);\r\n    }\r\n\r\n    function fund() external payable {\r\n        require(covertEthToUsd(msg.value) >= MINIMUM_VALUE, \"Send more ETH\");\r\n        fundersToAmount[msg.sender] = msg.value;\r\n    }\r\n\r\n    function getFund() external windowClose onlyOwner {\r\n        require(covertEthToUsd(address(this).balance) >= TARGET, \"Target is not reached\");\r\n        bool success;\r\n        uint256 balance = address(this).balance;\r\n        (success, ) = payable(msg.sender).call{value: balance}(\"\");\r\n        require(success, \"transfer tx failed\");\r\n        emit FundWithdrawByOwner(balance);\r\n    }\r\n\r\n    function reFund() external windowClose  {\r\n        require(covertEthToUsd(address(this).balance) < TARGET, \"Target is reached\");\r\n        bool success;\r\n        uint256 blance = fundersToAmount[msg.sender];\r\n        (success, ) = payable(msg.sender).call{value: blance}(\"\");\r\n        require(success, \"transfer tx failed\");\r\n        fundersToAmount[msg.sender] = 0;\r\n        emit RefundByFunder(msg.sender, blance);\r\n    }\r\n\r\n    function covertEthToUsd(uint256 ethAmount) internal view returns (uint256) {\r\n        (\r\n             /* uint80 roundID */,\r\n            int ethPrice,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = dataFeed.latestRoundData();\r\n        return uint256(ethPrice) * ethAmount / (10 ** 8);  //以Wei为尺度表征的美元数量\r\n\r\n    }\r\n\r\n\r\n    modifier windowClose() {\r\n        require(block.timestamp >= DEPLOYMENTTIMESTAMP + LOCK_TIME, \"window is not closed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"this function can only be called by owner\");\r\n        _;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\nimport \"@chainlink/contracts/src/v0.8/shared/mocks/MockV3Aggregator.sol\";"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}